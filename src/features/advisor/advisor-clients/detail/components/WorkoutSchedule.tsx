'use client';

import React from 'react';
import { Card } from '@/shared/ui';

interface WorkoutScheduleProps {
  clientId: string;
}

export default function WorkoutSchedule({ clientId }: WorkoutScheduleProps) {
  const days = ['Th·ª© 2', 'Th·ª© 3', 'Th·ª© 4', 'Th·ª© 5', 'Th·ª© 6', 'Th·ª© 7', 'Ch·ªß nh·∫≠t'];
  const [selectedDay, setSelectedDay] = React.useState(0);

  const weekSchedule = [
    {
      day: 'Th·ª© 2',
      focus: 'Ng·ª±c & Vai',
      exercises: [
        { name: 'Bench Press', sets: 4, reps: '8-12', rest: '90s', notes: 'T·∫≠p trung v√†o form ƒë√∫ng' },
        { name: 'Incline Dumbbell Press', sets: 3, reps: '10-12', rest: '60s', notes: '' },
        { name: 'Cable Fly', sets: 3, reps: '12-15', rest: '60s', notes: 'N√©n ƒë·ªânh 2 gi√¢y' },
        { name: 'Shoulder Press', sets: 4, reps: '8-12', rest: '90s', notes: '' },
        { name: 'Lateral Raises', sets: 3, reps: '12-15', rest: '45s', notes: 'Ki·ªÉm so√°t chuy·ªÉn ƒë·ªông' },
      ],
    },
    {
      day: 'Th·ª© 3',
      focus: 'L∆∞ng & B·∫Øp tay sau',
      exercises: [
        { name: 'Deadlift', sets: 4, reps: '6-8', rest: '2-3 ph√∫t', notes: 'Kh·ªüi ƒë·ªông k·ªπ' },
        { name: 'Pull-ups', sets: 4, reps: 'Max', rest: '90s', notes: 'C√≥ th·ªÉ d√πng h·ªó tr·ª£' },
        { name: 'Barbell Row', sets: 4, reps: '8-10', rest: '90s', notes: '' },
        { name: 'Lat Pulldown', sets: 3, reps: '10-12', rest: '60s', notes: '' },
        { name: 'Triceps Pushdown', sets: 3, reps: '12-15', rest: '45s', notes: '' },
      ],
    },
    {
      day: 'Th·ª© 4',
      focus: 'Ngh·ªâ ng∆°i/Cardio nh·∫π',
      exercises: [
        { name: 'ƒêi b·ªô nhanh', sets: 1, reps: '30 ph√∫t', rest: '', notes: 'T·ªëc ƒë·ªô v·ª´a ph·∫£i' },
        { name: 'Gi√£n c∆°', sets: 1, reps: '15 ph√∫t', rest: '', notes: 'T·∫≠p trung v√†o nh√≥m c∆° ƒë√£ t·∫≠p' },
      ],
    },
    {
      day: 'Th·ª© 5',
      focus: 'Ch√¢n',
      exercises: [
        { name: 'Squat', sets: 4, reps: '8-12', rest: '2-3 ph√∫t', notes: 'Xu·ªëng s√¢u' },
        { name: 'Leg Press', sets: 4, reps: '10-12', rest: '90s', notes: '' },
        { name: 'Lunges', sets: 3, reps: '10/ch√¢n', rest: '60s', notes: 'Gi·ªØ thƒÉng b·∫±ng' },
        { name: 'Leg Curl', sets: 3, reps: '12-15', rest: '60s', notes: '' },
        { name: 'Calf Raises', sets: 4, reps: '15-20', rest: '45s', notes: 'K√©o gi√£n ƒë·ªânh' },
      ],
    },
    {
      day: 'Th·ª© 6',
      focus: 'Tay & B·ª•ng',
      exercises: [
        { name: 'Barbell Curl', sets: 4, reps: '8-12', rest: '60s', notes: 'Kh√¥ng swing' },
        { name: 'Hammer Curl', sets: 3, reps: '10-12', rest: '60s', notes: '' },
        { name: 'Concentration Curl', sets: 3, reps: '12-15', rest: '45s', notes: '' },
        { name: 'Plank', sets: 3, reps: '60s', rest: '60s', notes: 'Gi·ªØ th·∫≥ng l∆∞ng' },
        { name: 'Russian Twist', sets: 3, reps: '20/b√™n', rest: '45s', notes: '' },
      ],
    },
    {
      day: 'Th·ª© 7',
      focus: 'Cardio & HIIT',
      exercises: [
        { name: 'Ch·∫°y b·ªô', sets: 1, reps: '20 ph√∫t', rest: '', notes: 'T·ªëc ƒë·ªô ·ªïn ƒë·ªãnh' },
        { name: 'Burpees', sets: 3, reps: '10-15', rest: '60s', notes: '' },
        { name: 'Mountain Climbers', sets: 3, reps: '30s', rest: '60s', notes: '' },
        { name: 'Jump Rope', sets: 3, reps: '2 ph√∫t', rest: '60s', notes: '' },
      ],
    },
    {
      day: 'Ch·ªß nh·∫≠t',
      focus: 'Ngh·ªâ ng∆°i ho√†n to√†n',
      exercises: [
        { name: 'Ngh·ªâ ng∆°i', sets: 1, reps: '', rest: '', notes: 'Ph·ª•c h·ªìi c∆° b·∫Øp' },
        { name: 'Gi√£n c∆° nh·∫π', sets: 1, reps: '10 ph√∫t', rest: '', notes: 'Th∆∞ gi√£n' },
      ],
    },
  ];

  const selectedWorkout = weekSchedule[selectedDay];

  return (
    <div className="space-y-4">
      {/* Day Selector */}
      <Card className="p-4">
        <div className="flex gap-2 overflow-x-auto">
          {days.map((day, index) => (
            <button
              key={index}
              onClick={() => setSelectedDay(index)}
              className={`px-6 py-3 rounded-lg font-medium whitespace-nowrap transition-all ${
                selectedDay === index
                  ? 'bg-primary text-white shadow-md'
                  : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
              }`}
            >
              {day}
            </button>
          ))}
        </div>
      </Card>

      {/* Workout Focus */}
      <Card className="p-6 bg-gradient-to-r from-blue-50 to-purple-50">
        <div className="flex items-center gap-4">
          <div className="w-16 h-16 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white text-2xl">
            üí™
          </div>
          <div>
            <h2 className="text-2xl font-bold mb-1">{selectedWorkout.focus}</h2>
            <p className="text-gray-600">{selectedWorkout.day}</p>
          </div>
        </div>
      </Card>

      {/* Exercises */}
      <Card className="p-6">
        <h3 className="text-lg font-semibold mb-4">B√†i t·∫≠p ({selectedWorkout.exercises.length})</h3>
        <div className="space-y-4">
          {selectedWorkout.exercises.map((exercise, index) => (
            <div
              key={index}
              className="bg-gradient-to-r from-gray-50 to-white p-5 rounded-lg border border-gray-200 hover:shadow-md transition-shadow"
            >
              <div className="flex justify-between items-start mb-3">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 bg-primary bg-opacity-10 rounded-full flex items-center justify-center text-primary font-bold">
                    {index + 1}
                  </div>
                  <div>
                    <h4 className="font-semibold text-lg">{exercise.name}</h4>
                    {exercise.notes && (
                      <p className="text-sm text-gray-500 mt-1">üí° {exercise.notes}</p>
                    )}
                  </div>
                </div>
              </div>

              <div className="grid grid-cols-3 gap-4 pl-13">
                <div className="bg-blue-50 p-3 rounded-lg">
                  <p className="text-xs text-gray-600 mb-1">Sets</p>
                  <p className="text-lg font-bold text-blue-600">{exercise.sets}</p>
                </div>
                <div className="bg-green-50 p-3 rounded-lg">
                  <p className="text-xs text-gray-600 mb-1">Reps</p>
                  <p className="text-lg font-bold text-green-600">{exercise.reps}</p>
                </div>
                <div className="bg-purple-50 p-3 rounded-lg">
                  <p className="text-xs text-gray-600 mb-1">Ngh·ªâ</p>
                  <p className="text-lg font-bold text-purple-600">{exercise.rest || '-'}</p>
                </div>
              </div>
            </div>
          ))}
        </div>
      </Card>

      {/* Workout Summary */}
      <Card className="p-6 bg-gradient-to-r from-green-50 to-blue-50">
        <h3 className="font-semibold mb-3">T·ªïng k·∫øt bu·ªïi t·∫≠p</h3>
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
          <div>
            <p className="text-sm text-gray-600">T·ªïng b√†i t·∫≠p</p>
            <p className="text-2xl font-bold text-primary">{selectedWorkout.exercises.length}</p>
          </div>
          <div>
            <p className="text-sm text-gray-600">T·ªïng Sets</p>
            <p className="text-2xl font-bold text-primary">
              {selectedWorkout.exercises.reduce((sum, ex) => sum + ex.sets, 0)}
            </p>
          </div>
          <div>
            <p className="text-sm text-gray-600">Th·ªùi gian d·ª± ki·∫øn</p>
            <p className="text-2xl font-bold text-primary">60-90 ph√∫t</p>
          </div>
        </div>
      </Card>
    </div>
  );
}
